## Week 3 Assignment by Veronica Rozendaal. Purpose is to write a pair of 
## functions that cache the inverse of a matrix using Lexical Scope concepts.
## The two functions created are: makeCacheMatrix and cacheSolve

setwd("C:/Users/Office/Documents/RCourse/Week3/ProgrammingAssignment2-master/")

###############################################################################
## FUNCTION DESCRIPTION: makeCacheMatrix function creates a special "matrix" object that can cache
## its inverse or store the matrix and its inverse.

## First initialize the two objects x and n1, where x is the argument to be
## passed when testing in makeCacheMatrix for the matrix and n1 will be used
## later in the function for the matrix inverse.

## SAMPLE OUTPUT: Matrices and inverse matrix for testing in R
# Use a simple matrix m1, with a simple matrix inverse n1
# 1. Define the matrix and call it m1
# m1<-matrix(c(1/2, -1/4, -1, 3/4), nrow=2, ncol=2)
# m1
# 2.  Caculate the Identity matrix I2
# I2<-matrix(c(1,0,0,1), nrow=2, ncol=2)
# I2
# 3. Define the inverse of m1 as n1 by using the matrix multiply in R: %*%
# n1<-matrix(c(6,2,8,4), nrow=2, ncol=2)
# n1
## Checks
# m1%*%n1
# n1%*%m1
# solve (m1)
# solve (n1)

# 4. Next, you source cachematrix.R and call the functions below:
# source("cachematrix.R")
# myMatrix_object<-makeCacheMatrix(m1)
# cacheSolve(myMatrix_object)
# call again myMatrix_object<-makeCacheMatrix(m1), then you should retrieve (not recalculate)

# 5. Use the set function to "put in" a new matrix. For example n2
# n2<-matrix(c(5/8,-1/8,-7/8,3/8), nrow=2, ncol=2)
# myMatrix_object$set(n2)
# cacheSolve(myMatrix_object) -- this obtains its matrix inverse; then call it again and the calcuation should be retrieved (not recalculated)

############################################################################
makeCacheMatrix <- function(x = matrix()) {
        n1<-NULL
        ## define the 4 different behaviors or functions for object of type
        ## makeCacheMatrix as follows: 
        ## 1. set() takes an argument named m1 or any object name other
        ## than x. m1 is assumed to be a matrix.
        set<-function(m1){
                ## Use the <<- operator to assign a value to an object in an
                ## environment that is different from the current environment.
                ## When set executes, first, this assigns the input argument 
                ## to the x object in the parent environment, 
                x<<-m1
                ## and second, this assigns a value of NULL to the n1 object 
                ## in the parent environment.
                ## this line, clears any value of n1 that had been cached by a
                ## prior execution of cacheSolve()
                n1<<-NULL
        }
        ## 2. getter for the matrix x:
        get<-function()x
        ## 3 the setter for the inverse n1
        setinverse<-function(solve) n1<<-solve
        ## 4 the getter for the inverse n1
        getinverse<-function()n1
        ## Create the new special "matrix" object by returning a list() 
        ## to assign each of these functions as an element within a list () 
        ## and returns it to the parent environment.  Here we're naming the 
        ## list elements, which allows to use the $ form of the extract 
        ## operator to access the functions by name rather than by [[
        list(set=set, get=get,
             setinverse = setinverse,
             getinverse = getinverse)
}

###############################################################################
## FUNCTION DESCRIPTION: cacheSolve requires an argument that is returned by makeCacheMatrix()
## in order to retrieve the inverse from the cached value that is stored in the
## makeCacheMatrix() object's environment. cacheSolve computes the inverse 
## of the special "matrix" returned by makeCacheMatrix above. 
## If the inverse has already been calculated (and the matrix has not changed), 
## then the cachesolve should retrieve the inverse from the cache.

cacheSolve <- function(x, ...) {
        ## Return a matrix that is the inverse of 'x'
        ## the function attempts to retrieve an inverse from the matrix 
        ## object passed in as the argument. First, it calls the getinverse() 
        ## function on the input object.
        n1<-x$getinverse()
        ## then it checks to see whether the result is NULL. Since 
        ## makeCacheMatrix() sets the cached inverse to NULL whenever a new
        ## matrix is set into object, if the value here is not equal to NULL, 
        ## we have a valid, cached inverse and can return it to the parent 
        ## environment
        if (!is.null(n1)){
                message("getting cached data")
                return (n1)
        }
        ## if the result of !is.null(n1) is FALSE, cacheSolve() gets the matrix
        ## from the input object, calculates the solve(), uses the setinverse()
        ## function on the input object to set the inverse in the input object,
        ## and then returns the value of the inverse to the parent environment 
        ## by printing the inverse object
        data<-x$get()
        n1<-solve(data)
        x$setinverse(n1)
        n1
}