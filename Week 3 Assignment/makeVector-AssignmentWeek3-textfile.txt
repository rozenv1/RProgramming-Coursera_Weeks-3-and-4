## setwd("C:/Users/Office/Documents/RCourse/Week3/")
setwd("M:/Documents/RCourse/Week3/")

###############################################################################
## FUNCTION DESCRIPTION: Caching the Mean of Vector

## makeVector function creates a special "vector," or an R object that stores
## a vector and its mean. makeVector includes 4 behavior or functions (1 to 4)
## in its environment as listed below and 2 data objects (x and m).

##-----------------------------------------------------------------------------
## SAMPLE OUTPUT:
# source("makeVector.R")
# > a<-makeVector(1:100)
# > b<-makeVector(1:100)
# > cachemean(a)
# [1] 50.5
# > cachemean (a)
# getting cached data
# [1] 50.5
# > cachemean (b)
# [1] 50.5
# > cachemean (b)
# getting cached data
# [1] 50.5

# This shows the use of set(), so that once an object of type makeVector() is created, its value can be
# changed without initializing another instance of the object.
# > a<-makeVector(1:10)
# > cachemean(a)
# [1] 5.5
# > cachemean(a)
# getting cached data
# [1] 5.5
# > a$set(c(30,50,90,120,180))
# > cachemean(a)
# [1] 94
# > cachemean(a)
# getting cached data
# [1] 94
##-----------------------------------------------------------------------------------

## First, initialize the two objects m and x.
makeVector<-function(x=numeric()){
        m<-NULL
        ## define the 4 different behaviors or functions for object of type
        ## makeVector as follows: 
        ## 1 set(), which takes an argument named y or any object name other
        ## than x. Y is assumed a numeric vector.
        set<-function (y){
                ## Use the <<- operator to assign a value to an object in an
                ## environment that is different from the current environment.
                ## When set executes, first, it assigns the input argument to the x
                ## object in the parent environment, and second, it assigns a value of
                ## NULL to the m object in the parent environment.
                x<<-y
                ## this line, clears any value of m that had been cached by a
                ## prior execution of cachemean()
                m<<-NULL
        }
        ## 2 getter for the vector x: 
        get<-function()x
        ## 3 the setter for the mean m
        setmean<-function(mean) m<<-mean
        ## 4 the getter for the mean m
        getmean<-function()m
        ## Create the new special "vector" object by returning a list() 
        ## to assign each of these functions as an element within a list () 
        ## and returns it to the parent environment.  Here we're naming the 
        ## list elements, which allows to use the $ form of the extract 
        ## operator to access the functions by name rather than by [[
        list(set=set, get=get,
             setmean = setmean,
             getmean = getmean)
}

## cachemean () function requires an argument that is returned by makeVector()
## in order to retrieve the mean from the cached value that is stored in the
## makeVector() object's environment.
## cachemean function calculates the mean of the special "vector" created in
## makeVector. However, it first checks to see if the mean has already been
## calculated, if so, it gets the mean from the cache and skips the computation.
## Otherwise, it calculates the mean of the data and sets the value of the mean
## in the cache via the setmean function.
## cachemean is required to populate and/or retrieve the mean from an object
## of type makeVector()
cachemean<-function(x,...){
        ## the function attempts to retrieve a mean from the object passed in
        ## as the argument. First, it calls the getmean() function on the input
        ## object.
        m<-x$getmean()
        ## then it checks to see whether the result is NULL. Since makeVector()
        ## sets the cached mean to NULL whenever a new vector is set into
        ## object, if the value here is not equal to NULL, we have a valid,
        ## cached mean and can return it to the parent environment
        if (!is.null(m)){
                message("getting cached data")
                return (m)
        }
        ## if the result of !is.null(m) is FALSE, cachemean() gets the vector
        ## from the input object, calculates the mean (), uses the setmean()
        ## function on the input object to set the mean in the input object,
        ## and then returns the value of the mean to the parent environment by
        ## printing the mean object
        data<-x$get()
        m<-mean(data,...)
        x$setmean(m)
        m
}